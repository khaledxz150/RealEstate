//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Business
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RealEstateEntities : DbContext
    {
        public RealEstateEntities()
            : base("name=RealEstateEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<Locolization> Locolizations { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Layout> Layouts { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<OfferType> OfferTypes { get; set; }
        public virtual DbSet<Owner> Owners { get; set; }
        public virtual DbSet<Property> Properties { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Type> Types { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Lookup> Lookups { get; set; }
        public virtual DbSet<Dictionary> Dictionaries { get; set; }
    
        public virtual int DHelper(Nullable<int> langaugeID)
        {
            var langaugeIDParameter = langaugeID.HasValue ?
                new ObjectParameter("LangaugeID", langaugeID) :
                new ObjectParameter("LangaugeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DHelper", langaugeIDParameter);
        }
    
        public virtual ObjectResult<GetDropDownList_Result> GetDropDownList(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDropDownList_Result>("GetDropDownList", iDParameter);
        }
    
        public virtual ObjectResult<GetProperty_Result> GetProperty(Nullable<int> propertyID, Nullable<int> langID)
        {
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("PropertyID", propertyID) :
                new ObjectParameter("PropertyID", typeof(int));
    
            var langIDParameter = langID.HasValue ?
                new ObjectParameter("LangID", langID) :
                new ObjectParameter("LangID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProperty_Result>("GetProperty", propertyIDParameter, langIDParameter);
        }
    
        public virtual ObjectResult<Login1_Result> Login1(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Login1_Result>("Login1", usernameParameter, passwordParameter);
        }
    
        public virtual int SignUp(string userName, string password, string userFirstNameEng, string userLastNameEng, string userFirstNameAr, string userLastNameAr, string userEmail, Nullable<int> phoneNumber, Nullable<int> language, Nullable<int> country, Nullable<int> city, string addressDescription)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userFirstNameEngParameter = userFirstNameEng != null ?
                new ObjectParameter("UserFirstNameEng", userFirstNameEng) :
                new ObjectParameter("UserFirstNameEng", typeof(string));
    
            var userLastNameEngParameter = userLastNameEng != null ?
                new ObjectParameter("UserLastNameEng", userLastNameEng) :
                new ObjectParameter("UserLastNameEng", typeof(string));
    
            var userFirstNameArParameter = userFirstNameAr != null ?
                new ObjectParameter("UserFirstNameAr", userFirstNameAr) :
                new ObjectParameter("UserFirstNameAr", typeof(string));
    
            var userLastNameArParameter = userLastNameAr != null ?
                new ObjectParameter("UserLastNameAr", userLastNameAr) :
                new ObjectParameter("UserLastNameAr", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var phoneNumberParameter = phoneNumber.HasValue ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(int));
    
            var languageParameter = language.HasValue ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(int));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(int));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var addressDescriptionParameter = addressDescription != null ?
                new ObjectParameter("AddressDescription", addressDescription) :
                new ObjectParameter("AddressDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SignUp", userNameParameter, passwordParameter, userFirstNameEngParameter, userLastNameEngParameter, userFirstNameArParameter, userLastNameArParameter, userEmailParameter, phoneNumberParameter, languageParameter, countryParameter, cityParameter, addressDescriptionParameter);
        }
    }
}
